# Create setup backup of setup file by moving it and appending ".backup" to its name
function backup() {
  local target=$1
  if [ -e "$target" ]; then
    if [ ! -L "$target" ]; then
      mv "$target" "$target.backup"
    fi
  fi
}

# Create setup symlink of setup file
function symlink() {
  local file=$1
  local link=$2
  if [ -L "$link" ]; then
    unlink "$link"
  fi
  if [ ! -e "$link" ]; then
    ln -s "$file" "$link"
  fi
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_" || return
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$*" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* ./*
  fi
}

# `o` with no arguments opens the current directory, otherwise opens the given location
function o() {
  if [ $# -eq 0 ]; then
    open .
  else
    open "$@"
  fi
}

# Concatenates source files into a summary to help with automated code review
function summarize() {
  find_command="find \"$(pwd)\" -type f \( "
  for extension in "$@"; do
    find_command+="-name \"*.$extension\" -o "
  done
  find_command="${find_command% -o } \) -exec bash -c 'echo \"=== {} ===\"; cat \"{}\"; echo \"\";' \; > \"summary.txt\""

  eval "$find_command"
  echo "Summary saved to summary.txt"
}

function git-prune-branches() {
  echo "switching to master or main branch.."
  git branch | grep 'main\|master' | xargs -n 1 git checkout
  echo "fetching with -p option...";
  git fetch -p;
  echo "running pruning of local branches"
  git branch -vv | grep ': gone]' | grep -v "\*" | awk '{ print $1; }' | xargs -r git branch -D ;
}
