[include]
    path = ~/.git-me
[includeIf "gitdir:~/workspace/work"]
    path = ~/.git-work

[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits.
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format.
	s = status -s

	# Show the diff between the latest commit and the current state.
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state.
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Clone a repository including all submodules.
	c = clone --recursive

	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose

	# List aliases.
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit.
	amend = commit --amend --reuse-message=HEAD

	# Interactive rebase with the given number of latest commits.
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove branches that don't exist in the origin anymore.
  prune = "!p() { git fetch -p ; git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -D; }; p"

	# List contributors with number of commits.
	contributors = shortlog --summary --numbered

	# Show the user email for the current repository.
	whoami = config user.email

	# Amend the last commit with the current changes and push it
	fixup = "!git add . && git commit --amend --reuse-message=HEAD && git push --force-with-lease"

  # Add all changed files, create a commit with a given message and push
	ready = "!r() { git add . && git commit -m \"$1\" && git push; }; r"

  # Create a new feature branch with the given name
	feature = "!f() { git checkout -b feature/$1; }; f"

  # Create a new bugfix branch with the given name
	bugfix = "!f() { git checkout -b bugfix/$1; }; f"

  # Force push, but safely
  pushf = push --force-with-lease

  # Updates a branch and rebase the changes into the current branch
  update = "!u() { git fetch origin $1:$1; }; u"

  # Renames the current branch and also its remote
  rename = "!r() { old_name=$(git rev-parse --abbrev-ref HEAD) && git branch -m $old_name $1 && git push origin --delete $old_name && git branch --unset-upstream $1 && git push origin $1 && git push origin -u $1; }; r"

[apply]
	# Detect whitespace errors when applying a patch.
	whitespace = fix

[branch]
	# Show most recently changed branches first.
	sort = -committerdate

[core]
	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

  # Default editor for handling merge, conflict resolutions, etc
	editor = nano

	# Global .gitignore
  excludesFile = ~/.gitignore

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[commit]
	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = true

[diff]
	# Detect copies as well as renames.
	renames = copies

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
  autoSetupRemote = true

[init]
	defaultBranch = main

[advice]
  # Disable cherry picking message while rebasing
  skippedCherryPicks = false

[fetch]
  # Prune deleted remote branches when fetching
  prune = true
